import java.nio.file.Paths

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath "org.multi-os-engine:moe-gradle:$versions.moeGradle"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlin"
    }
}

apply plugin: 'moe'
apply plugin: 'kotlin'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

test { exclude '**' }

moe {
    xcode.mainTarget = 'SlyChat'
    xcode.testTarget = 'SlyChat-Test'
    xcode.generateProject = false
    xcode.xcodeProjectDirPath = 'xcode'
}

dependencies {
    compile fileTree(dir: 'lib', include: '*.jar')

    compile project(':ui-services')
    compile project(':stdout-logger')
}

def xcodeParams = [
    "SLY_VERSION_STRING=$project.VERSION",
    "SLY_BUILD_NUMBER=$project.IOS_VERSION_CODE",
    //MOE defaults
    'MOE_GRADLE_EXTERNAL_BUILD=YES',
    'ONLY_ACTIVE_ARCH=NO',
]

moeMainDebugIphoneosXcodeBuild {
    additionalParameters = xcodeParams
}

moeMainReleaseIphoneosXcodeBuild {
    additionalParameters = xcodeParams
}

moeMainDebugIphonesimulatorXcodeBuild {
    additionalParameters = xcodeParams
}

moeMainReleaseIphonesimulatorXcodeBuild {
    additionalParameters = xcodeParams
}

moeIpaBuild {
    inputApp 'build/moe/xcodebuild/Release-iphoneos/Sly.app'
}

class BuildArchive extends org.moe.gradle.tasks.AbstractBaseTask {
    List<String> additionalParameters = []

    BuildArchive() {
        java.nio.file.Path out = Paths.get(org.moe.gradle.MoePlugin.MOE)

        supportsRemoteBuild = false
        logFile = resolvePathInBuildDir(out, "BuildArchive.log")

        //just let xcode decide this
        //the scheme used is ~/Library/Developer/Xcode/Archives/2017-01-03/SlyChat 2017-01-03, 3.34 PM.xcarchive
        outputs.upToDateWhen { false }
    }

    @Override
    protected void run() {
        def mainTarget = moeExtension.xcode.mainTarget
        java.io.File projectDir = project.file("$moeExtension.xcode.xcodeProjectDirPath/${mainTarget}.xcodeproj")

        exec { spec ->
            spec.setExecutable('xcrun')

            spec.args('-sdk', 'iphoneos')
            spec.args('xcodebuild')
            spec.args('-project', projectDir)

            spec.args('-scheme', mainTarget)
            spec.args('-configuration', 'Release')

            spec.args(additionalParameters)

            spec.args('archive')
        }
    }
}

task buildArchive(type: BuildArchive, dependsOn: moeMainReleaseIphoneosXcodeBuild) {
    additionalParameters = xcodeParams
}
