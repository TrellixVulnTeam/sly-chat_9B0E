group 'com.vfpowertech'
version project.VERSION
ext.androidVersionCode = project.ANDROID_VERSION_CODE.toInteger()

buildscript {
    ext {
        versions = [
            kotlin: '1.0.6',
            slf4j: '1.7.15',
            roboVM: '1.13.0',
            jackson: '2.8.1',
            kovenant: '3.3.0',
            libsignal: '2.4.0',
            jodaTime: '2.9.2',
            sqlite4java: '1.0.392',
            spongycastle: '1.54.0.0',
            dagger: '2.6',
            rxjava: '1.1.8',
            rxjavafx: '0.1.4',
            rxandroid: '1.2.1',
            jfxGradlePlugin: '8.8.1',
            appcompatv7: '23.1.1',
            playServices: '10.0.1',
            googleServices: '3.0.0',
            libphonenumber: '7.1.1',
            junit: '4.11',
            assertJ: '3.5.1',
            mockitoKotlin: '0.5.2',
            androidGradle: '2.2.3',
            androidBuildTools: '23.0.3',
            androidCompileSdk: 23,
            jsbridge: '0.3.1',
            controlsFx: '8.40.11',
            nsMenuFx: '2.1.4',
            jna: '4.2.2',
            androidDeviceNames: '1.1.2',
            prettyTime: '4.0.1.Final',
            moeGradle: '1.2.5',
            javaObjcBridge: '1.0.0',
            tika: '1.14',
        ]
    }

    repositories {
        jcenter()
    }
}

subprojects {
    repositories {
        mavenLocal()
        jcenter()
    }

    project.afterEvaluate { p ->
        p.dependencies {
            compile "org.jetbrains.kotlin:kotlin-stdlib:$versions.kotlin"
            testCompile "org.jetbrains.kotlin:kotlin-test:$versions.kotlin"
            //android doesn't support testRuntime (since there is no such concept there)
            //so just put it as a compile-time dep
            testCompile "org.jetbrains.kotlin:kotlin-reflect:$versions.kotlin"
            testCompile "junit:junit:$versions.junit"
            testCompile "org.assertj:assertj-core:$versions.assertJ"
            testCompile "com.nhaarman:mockito-kotlin:$versions.mockitoKotlin"
        }
    }
}

task generateBuildConfig(type: GenBuildConfig) {
}

task nextRelease(type: UpdateVersion) {
    versionType = VersionType.MINOR
}

task nextHotfix(type: UpdateVersion) {
    versionType = VersionType.PATCH
}

task nextSnapshot(type: UpdateVersion) {
    versionType = VersionType.SNAPSHOT
}

task nextIOSVersion(type: UpdateVersion) {
    versionType = VersionType.IOS
}

task nextAndroidVersion(type: UpdateVersion) {
    versionType = VersionType.ANDROID
}

task printVersionInfo {
    doLast {
        println("Version: $project.version")
        println("Android version code: $project.androidVersionCode")
    }
}

task clean {
    doFirst {
        delete generateBuildConfig.generateRoot
        delete generateBuildConfig.jsOutputFile
    }

    group = 'build'
}

project(':core') {
    apply plugin: 'idea'

    idea {
        module {
            sourceDirs += generateBuildConfig.srcRoot
            generatedSourceDirs += generateBuildConfig.srcRoot
        }
    }

    afterEvaluate { p ->
        p.sourceSets.main.java.srcDirs += generateBuildConfig.srcRoot
        p.compileJava.dependsOn generateBuildConfig
    }
}

import java.nio.file.*

project(':ui-services') {
    apply plugin: 'idea'

    //hack to give IDE access to generated files
    if (!System.getProperty('os.name').toLowerCase(Locale.ROOT).startsWith('windows')) {
        Path linkLocation = new File("$projectDir/generated").toPath()
        Path linkTarget = new File("$buildDir/generated/source/kapt/main").toPath()
        if (!Files.exists(linkLocation, LinkOption.NOFOLLOW_LINKS)) {
            Files.createSymbolicLink(linkLocation, linkTarget)
        }

        idea {
            module {
                sourceDirs += file('generated')
                generatedSourceDirs += file('generated')
            }
        }
    }
}

project(':ios') {
    afterEvaluate { p ->
        rootProject.tasks.create(name: 'distIOS', description: 'Release IPA build', dependsOn: p.tasks.appStoreIPA) {
            doLast {
                print "Generated release IPA: ${p.tasks.appStoreIPA.ipaPath}"
            }
        }
    }
}

project(':android') {
    afterEvaluate { p ->
        //accessing via p.tasks.assembleRelease no longer works on newer versions
        rootProject.tasks.create(name: 'distAndroid', description: 'Release APK build', dependsOn: 'android:assembleRelease') {
            doLast {
                def variants = p.android.applicationVariants
                def releaseVariant = variants.find { it.name == 'release' }
                print "Generated release APK: ${releaseVariant.outputs.first().outputFile}"
            }
        }
    }
}
