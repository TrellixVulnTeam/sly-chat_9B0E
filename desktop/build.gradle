import java.nio.file.Files
import java.nio.file.LinkOption
import java.security.MessageDigest

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlin"
        classpath "de.dynamicfiles.projects.gradle.plugins:javafx-gradle-plugin:$versions.jfxGradlePlugin"
    }
}

apply plugin: 'kotlin'
apply plugin: 'application'
apply plugin: 'javafx-gradle-plugin'

mainClassName = 'io.slychat.messenger.desktop.DesktopApp'
applicationName = "sly-chat"

sourceSets.main.resources.srcDirs += "$rootProject.projectDir/ui"
sourceSets.main.resources.srcDirs += "$rootProject.projectDir/desktop-libraries"

dependencies {
    compile project(':ui-services')
    compile project(':stdout-logger')

    compile "com.vfpowertech:jsbridge-desktop-webengine:$versions.jsbridge"
    compile "nl.komponents.kovenant:kovenant-jfx:$versions.kovenant"
    compile "io.reactivex:rxjavafx:$versions.rxjavafx"

    compile "org.controlsfx:controlsfx:$versions.controlsFx"

    compile "net.java.dev.jna:jna:$versions.jna"

    //required on osx only
    compile "de.codecentric.centerdevice:centerdevice-nsmenufx:$versions.nsMenuFx"
    compile "ca.weblite:java-objc-bridge:$versions.javaObjcBridge"
}

//jna currently doesn't work on linux when using javapacker (segfaults when attempting to load any libraries)
//so we package the linux version this way for now
task copyJRE {
    ext.javaHome = '/usr/lib/jvm/java-8-openjdk'
    ext.destRoot = "$buildDir/jre"

    inputs.dir javaHome
    outputs.dir destRoot

    doLast {
        copy {
            from "$javaHome/jre/lib"
            into "$destRoot/lib"
        }

        copy {
            from "$javaHome/jre/bin/java"
            into "$destRoot/bin"
        }
    }
}

distributions {
    main {
        contents {
            from(copyJRE) {
                into "jre"
            }

            from "sly-chat"
        }
    }
}

//the distribution plugin is retarded and causes distTar and distZip to be run even for the assemble task
//so we disable distTar unless it's explicitly being run
distTar {
    compression = Compression.BZIP2
    extension = 'tar.bz2'

    enabled = gradle.startParameter.taskNames.contains(project.name + ':distLinux')
}

//don't use the zip on windows since we use the jfxnative plugin
distZip {
    enabled = false
}

jfx {
    //don't disable this, otherwise errors won't be displayed at all
    verbose = true

    mainClass = mainClassName

    jfxMainAppJarName = 'sly-chat.jar'

    appName = 'sly-chat'

    vendor = 'Keystream Information Systems'
}

String sha256(File path) {
    path.withInputStream {
        byte[] buffer = new byte[8192];

        MessageDigest digest = MessageDigest.getInstance("SHA-256")

        while (true) {
            int read = it.read(buffer)
            if (read <= 0)
                break

            digest.update(buffer, 0, read)
        }

        digest.digest().encodeHex().toString()
    }
}

void generateChecksumFile(File path) {
    String digest = sha256(path)
    File sha256Path = new File(path.toString() + ".sha256")
    sha256Path.withWriter { it.write(digest) }
}

task distLinux(dependsOn: distTar) << {
     generateChecksumFile(distTar.archivePath)
}

task distOSX(dependsOn: jfxNative) {
    //annoyingly we can't make jfxNative not append the version to the dmg file name
    //so we just symlink, since this makes this more consistent with the windows/linux releases
    File dmgPath = new File("$project.projectDir/$jfx.nativeOutputDir/$jfx.appName-${jfx.nativeReleaseVersion}.dmg")
    File outputDir = new File("$project.buildDir/distributions")
    File outputPath = new File("$outputDir/${jfx.appName}.dmg")

    outputs.file outputPath

    doLast {
        outputDir.mkdirs()

        if (!Files.exists(outputPath.toPath(), LinkOption.NOFOLLOW_LINKS))
            Files.createSymbolicLink(outputPath.toPath(), dmgPath.toPath())

        generateChecksumFile(outputPath)
    }
}

task zipWindows(type: Zip, dependsOn: jfxNative) {
    archiveName = jfx.appName + '.zip'

    File dirPath = new File("$project.projectDir/$jfx.nativeOutputDir/$jfx.appName")

    from dirPath
}

task distWindows(dependsOn: zipWindows) << {
    generateChecksumFile(zipWindows.archivePath)
}
