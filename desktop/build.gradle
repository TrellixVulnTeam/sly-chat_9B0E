import java.nio.file.Files
import java.nio.file.LinkOption
import java.security.MessageDigest

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlin"
        classpath "de.dynamicfiles.projects.gradle.plugins:javafx-gradle-plugin:$versions.jfxGradlePlugin"
    }
}

apply plugin: 'kotlin'
apply plugin: 'application'
apply plugin: 'javafx-gradle-plugin'

mainClassName = 'io.slychat.messenger.desktop.Main'
applicationName = "sly-chat"

sourceSets.main.resources.srcDirs += "$rootProject.projectDir/ui"
sourceSets.main.resources.srcDirs += "$rootProject.projectDir/desktop-libraries"

dependencies {
    compile project(':ui-services')
    compile project(':stdout-logger')

    compile "com.vfpowertech:jsbridge-desktop-webengine:$versions.jsbridge"
    compile "nl.komponents.kovenant:kovenant-jfx:$versions.kovenant"
    compile "io.reactivex:rxjavafx:$versions.rxjavafx"

    compile "org.controlsfx:controlsfx:$versions.controlsFx"

    compile "net.java.dev.jna:jna:$versions.jna"

    //required on osx only
    compile "de.codecentric.centerdevice:centerdevice-nsmenufx:$versions.nsMenuFx"
    compile "ca.weblite:java-objc-bridge:$versions.javaObjcBridge"
}

//jna currently doesn't work on linux when using javapacker (segfaults when attempting to load any libraries)
//so we package the linux version this way for now
task copyJRE {
    ext.javaHome = '/usr/lib/jvm/java-8-openjdk'
    ext.destRoot = "$buildDir/jre"

    inputs.dir javaHome
    outputs.dir destRoot

    doLast {
        copy {
            from "$javaHome/jre/lib"
            into "$destRoot/lib"
        }

        copy {
            from "$javaHome/jre/bin/java"
            into "$destRoot/bin"
        }
    }
}

distributions {
    main {
        contents {
            from(copyJRE) {
                into "jre"
            }

            from "sly-chat"
        }
    }
}

//the distribution plugin is retarded and causes distTar and distZip to be run even for the assemble task
//so we disable distTar unless it's explicitly being run
distTar {
    compression = Compression.BZIP2
    extension = 'tar.bz2'

    enabled = gradle.startParameter.taskNames.contains(project.name + ':distLinux')
}

//don't use the zip on windows since we use the jfxnative plugin
distZip {
    enabled = false
}

//there's the mac.signing-key-user-name setting, but setting it never actually works
//not providing a name doesn't work either, even when it's unambiguous
//even running the command it tries yields the key in the results, so I've no clue what its problem is
def osxSigningIdentity = 'Syst√®mes Informatiques Keystream Inc, Les (X87YZ6DYVJ)'

def jfxBundler = 'all'

switch (System.getProperty('os.name')) {
    case 'Linux':
        jfxBundler = 'image'
        break

    //don't bother wasting time building a .pkg or image
    case 'Mac OS X':
        jfxBundler = 'dmg'
        break

    //currently we just want a .zip file, and this is run during this process
    //by the zipWindows task
    case { it.startsWith('Windows') }:
        jfxBundler = 'all'
        break
}

jfx {
    //don't disable this, otherwise errors won't be displayed at all
    verbose = true

    mainClass = mainClassName

    jfxMainAppJarName = 'sly-chat.jar'

    appName = 'Sly'

    nativeReleaseVersion = rootProject.version

    vendor = 'Keystream Information Systems'

    bundler = jfxBundler

    bundleArguments = [
        'mac.category': 'public.app-category.social-networking',
        'mac.CFBundleIdentifier': 'io.slychat.messenger.desktop',
        //MUST be a string, otherwise the task just won't run but won't actually fail
        'mac.CFBundleVersion': '1',
        'mac.signing-key-developer-id-app': "Developer ID Application: $osxSigningIdentity".toString(),
        'mac.signing-key-developer-id-installer': "Developer ID Installer: $osxSigningIdentity".toString(),
    ]
}

String sha256(File path) {
    path.withInputStream {
        byte[] buffer = new byte[8192];

        MessageDigest digest = MessageDigest.getInstance("SHA-256")

        while (true) {
            int read = it.read(buffer)
            if (read <= 0)
                break

            digest.update(buffer, 0, read)
        }

        digest.digest().encodeHex().toString()
    }
}

void generateChecksumFile(File path) {
    String digest = sha256(path)
    File sha256Path = new File(path.toString() + ".sha256")
    sha256Path.withWriter { it.write(digest) }
}

task distLinux(dependsOn: distTar) {
    doLast {
        generateChecksumFile(distTar.archivePath)
    }
}

boolean isDMGProperlySigned(String path) {
    def result = exec {
        executable 'spctl'

        ignoreExitValue true

        args '-a', path
    }

    result.rethrowFailure()

    result.exitValue == 0
}

task verifyDMGSignature(dependsOn: jfxNative) {
    doLast {
        String mountRoot = "${System.getProperty('java.io.tmpdir')}"
        String mountPoint = "$mountRoot/$jfx.appName"
        String appPath = "$mountPoint/${jfx.appName}.app"
        File dmgPath = project.file("$jfx.nativeOutputDir/$jfx.appName-${jfx.nativeReleaseVersion}.dmg")

        logger.debug("Mounting $dmgPath to $mountPoint")

        exec {
            executable 'hdiutil'

            args 'attach', dmgPath.toString(), '-mountroot', mountRoot
        }

        try {
            if (!isDMGProperlySigned(appPath))
                throw new GradleException("DMG is not properly signed, rejected by GateKeeper check")
        }
        finally {
            exec {
                executable 'hdiutil'

                args 'detach', mountPoint
            }
        }
    }
}

task distOSX(dependsOn: verifyDMGSignature) {
    //annoyingly we can't make jfxNative not append the version to the dmg file name
    //so we just symlink, since this makes this more consistent with the windows/linux releases
    File dmgPath = new File("$project.projectDir/$jfx.nativeOutputDir/$jfx.appName-${jfx.nativeReleaseVersion}.dmg")
    File outputDir = new File("$project.buildDir/distributions")
    File outputPath = new File("$outputDir/${jfx.appName}.dmg")

    outputs.file outputPath

    doLast {
        outputDir.mkdirs()

        if (!Files.exists(outputPath.toPath(), LinkOption.NOFOLLOW_LINKS))
            Files.createSymbolicLink(outputPath.toPath(), dmgPath.toPath())

        generateChecksumFile(outputPath)
    }
}

task zipWindows(type: Zip, dependsOn: jfxNative) {
    archiveName = jfx.appName + '.zip'

    File dirPath = new File("$project.projectDir/$jfx.nativeOutputDir/$jfx.appName")

    from dirPath
}

task distWindows(dependsOn: zipWindows) {
    doLast {
        generateChecksumFile(zipWindows.archivePath)
    }
}

//can't extend jfx* tasks, as they just call these worker classes (and settings are plugin-level)
import de.dynamicfiles.projects.gradle.plugins.javafx.tasks.workers.JfxNativeWorker
task generateAppBundle(dependsOn: 'jfxJar') {
    doFirst {
        jfx {
            bundler = 'mac.app'
        }
    }

    doLast {
        new JfxNativeWorker().jfxnative(project)
    }
}

task runAppBundle {
    doLast {
        String appName = jfx.appName

        String appDir = project.file("${jfx.nativeOutputDir}/${appName}.app").toString()

        project.exec {
            executable = "$appDir/Contents/MacOS/$appName"
        }
    }
}
